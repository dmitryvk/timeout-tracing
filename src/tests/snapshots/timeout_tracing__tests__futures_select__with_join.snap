---
source: src/tests/futures_select.rs
expression: err
---
TimeoutElapsed {
    active_traces: [
        StackAndSpanTrace {
            stack_trace: Backtrace [
                { fn: "timeout_tracing::trace::StackAndSpanTrace::capture", file: "./src/trace.rs", line: [NNN] },
                { fn: "<timeout_tracing::trace::DefaultTraceCapturer as timeout_tracing::trace::CaptureTrace>::capture", file: "./src/trace.rs", line: [NNN] },
                { fn: "timeout_tracing::waker::TracingTimeoutWaker<C>::clone", file: "./src/waker.rs", line: [NNN] },
                { fn: "timeout_tracing::waker::TracingTimeoutWaker<C>::raw_clone", file: "./src/waker.rs", line: [NNN] },
                { fn: "<&core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef>::into_waker", file: "[crates]/tokio-[ver]/src/sync/task/atomic_waker.rs", line: [NNN] },
                { fn: "tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}}", file: "[crates]/tokio-[ver]/src/sync/task/atomic_waker.rs", line: [NNN] },
                { fn: "__rust_try" },
                { fn: "tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind", file: "[crates]/tokio-[ver]/src/sync/task/atomic_waker.rs", line: [NNN] },
                { fn: "tokio::sync::task::atomic_waker::AtomicWaker::do_register", file: "[crates]/tokio-[ver]/src/sync/task/atomic_waker.rs", line: [NNN] },
                { fn: "tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref", file: "[crates]/tokio-[ver]/src/sync/task/atomic_waker.rs", line: [NNN] },
                { fn: "tokio::runtime::time::entry::StateCell::poll", file: "[crates]/tokio-[ver]/src/runtime/time/entry.rs", line: [NNN] },
                { fn: "tokio::runtime::time::entry::TimerEntry::poll_elapsed", file: "[crates]/tokio-[ver]/src/runtime/time/entry.rs", line: [NNN] },
                { fn: "tokio::time::sleep::Sleep::poll_elapsed", file: "[crates]/tokio-[ver]/src/time/sleep.rs", line: [NNN] },
                { fn: "<tokio::time::sleep::Sleep as core::future::future::Future>::poll", file: "[crates]/tokio-[ver]/src/time/sleep.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::do_sleep_a::{{closure}}::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "<tracing::instrument::Instrumented<T> as core::future::future::Future>::poll", file: "[crates]/tracing-[ver]/src/instrument.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::do_sleep_a::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "<futures_util::future::future::fuse::Fuse<Fut> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/future/fuse.rs", line: [NNN] },
                { fn: "futures_util::future::future::FutureExt::poll_unpin", file: "[crates]/futures-util-[ver]/src/future/future/mod.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::do_sleep::{{closure}}::{{closure}}::{{closure}}::{{closure}}", file: "[crates]/futures-util-[ver]/src/async_await/select_mod.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::do_sleep::{{closure}}::{{closure}}::{{closure}}", file: "[crates]/futures-util-[ver]/src/async_await/select_mod.rs", line: [NNN] },
                { fn: "<futures_util::future::poll_fn::PollFn<F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/poll_fn.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::do_sleep::{{closure}}::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "<tracing::instrument::Instrumented<T> as core::future::future::Future>::poll", file: "[crates]/tracing-[ver]/src/instrument.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::do_sleep::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "<timeout_tracing::TimeoutFuture<C,Fut> as core::future::future::Future>::poll", file: "./src/lib.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::run_with_tracing::{{closure}}", file: "./src/tests/mod.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::with_join::{{closure}}::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::task::coop::with_budget", file: "[crates]/tokio-[ver]/src/task/coop/mod.rs", line: [NNN] },
                { fn: "tokio::task::coop::budget", file: "[crates]/tokio-[ver]/src/task/coop/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::Context::enter", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::enter::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::context::scoped::Scoped<T>::set", file: "[crates]/tokio-[ver]/src/runtime/context/scoped.rs", line: [NNN] },
                { fn: "tokio::runtime::context::set_scheduler::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/context.rs", line: [NNN] },
                { fn: "tokio::runtime::context::set_scheduler", file: "[crates]/tokio-[ver]/src/runtime/context.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::enter", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CurrentThread::block_on::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::context::runtime::enter_runtime", file: "[crates]/tokio-[ver]/src/runtime/context/runtime.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CurrentThread::block_on", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::runtime::Runtime::block_on_inner", file: "[crates]/tokio-[ver]/src/runtime/runtime.rs", line: [NNN] },
                { fn: "tokio::runtime::runtime::Runtime::block_on", file: "[crates]/tokio-[ver]/src/runtime/runtime.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::with_join::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "serial_test::serial_code_lock::local_serial_core", file: "[crates]/serial_test-[ver]/src/serial_code_lock.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::with_join", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::with_join::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
            ],
            span_trace: SpanTrace [
                { target: "timeout_tracing::tests::futures_select", name: "do_sleep_a", file: "src/tests/futures_select.rs", line: [NNN] },
                { target: "timeout_tracing::tests::futures_select", name: "do_sleep", file: "src/tests/futures_select.rs", line: [NNN] },
            ],
        },
        StackAndSpanTrace {
            stack_trace: Backtrace [
                { fn: "timeout_tracing::trace::StackAndSpanTrace::capture", file: "./src/trace.rs", line: [NNN] },
                { fn: "<timeout_tracing::trace::DefaultTraceCapturer as timeout_tracing::trace::CaptureTrace>::capture", file: "./src/trace.rs", line: [NNN] },
                { fn: "timeout_tracing::waker::TracingTimeoutWaker<C>::clone", file: "./src/waker.rs", line: [NNN] },
                { fn: "timeout_tracing::waker::TracingTimeoutWaker<C>::raw_clone", file: "./src/waker.rs", line: [NNN] },
                { fn: "<&core::task::wake::Waker as tokio::sync::task::atomic_waker::WakerRef>::into_waker", file: "[crates]/tokio-[ver]/src/sync/task/atomic_waker.rs", line: [NNN] },
                { fn: "tokio::sync::task::atomic_waker::AtomicWaker::do_register::{{closure}}", file: "[crates]/tokio-[ver]/src/sync/task/atomic_waker.rs", line: [NNN] },
                { fn: "__rust_try" },
                { fn: "tokio::sync::task::atomic_waker::AtomicWaker::do_register::catch_unwind", file: "[crates]/tokio-[ver]/src/sync/task/atomic_waker.rs", line: [NNN] },
                { fn: "tokio::sync::task::atomic_waker::AtomicWaker::do_register", file: "[crates]/tokio-[ver]/src/sync/task/atomic_waker.rs", line: [NNN] },
                { fn: "tokio::sync::task::atomic_waker::AtomicWaker::register_by_ref", file: "[crates]/tokio-[ver]/src/sync/task/atomic_waker.rs", line: [NNN] },
                { fn: "tokio::runtime::time::entry::StateCell::poll", file: "[crates]/tokio-[ver]/src/runtime/time/entry.rs", line: [NNN] },
                { fn: "tokio::runtime::time::entry::TimerEntry::poll_elapsed", file: "[crates]/tokio-[ver]/src/runtime/time/entry.rs", line: [NNN] },
                { fn: "tokio::time::sleep::Sleep::poll_elapsed", file: "[crates]/tokio-[ver]/src/time/sleep.rs", line: [NNN] },
                { fn: "<tokio::time::sleep::Sleep as core::future::future::Future>::poll", file: "[crates]/tokio-[ver]/src/time/sleep.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::do_sleep_b::{{closure}}::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "<tracing::instrument::Instrumented<T> as core::future::future::Future>::poll", file: "[crates]/tracing-[ver]/src/instrument.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::do_sleep_b::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "<futures_util::future::future::fuse::Fuse<Fut> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/future/fuse.rs", line: [NNN] },
                { fn: "futures_util::future::future::FutureExt::poll_unpin", file: "[crates]/futures-util-[ver]/src/future/future/mod.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::do_sleep::{{closure}}::{{closure}}::{{closure}}::{{closure}}", file: "[crates]/futures-util-[ver]/src/async_await/select_mod.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::do_sleep::{{closure}}::{{closure}}::{{closure}}", file: "[crates]/futures-util-[ver]/src/async_await/select_mod.rs", line: [NNN] },
                { fn: "<futures_util::future::poll_fn::PollFn<F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/poll_fn.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::do_sleep::{{closure}}::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "<tracing::instrument::Instrumented<T> as core::future::future::Future>::poll", file: "[crates]/tracing-[ver]/src/instrument.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::do_sleep::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "<timeout_tracing::TimeoutFuture<C,Fut> as core::future::future::Future>::poll", file: "./src/lib.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::run_with_tracing::{{closure}}", file: "./src/tests/mod.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::with_join::{{closure}}::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::task::coop::with_budget", file: "[crates]/tokio-[ver]/src/task/coop/mod.rs", line: [NNN] },
                { fn: "tokio::task::coop::budget", file: "[crates]/tokio-[ver]/src/task/coop/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::Context::enter", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::enter::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::context::scoped::Scoped<T>::set", file: "[crates]/tokio-[ver]/src/runtime/context/scoped.rs", line: [NNN] },
                { fn: "tokio::runtime::context::set_scheduler::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/context.rs", line: [NNN] },
                { fn: "tokio::runtime::context::set_scheduler", file: "[crates]/tokio-[ver]/src/runtime/context.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::enter", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CurrentThread::block_on::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::context::runtime::enter_runtime", file: "[crates]/tokio-[ver]/src/runtime/context/runtime.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CurrentThread::block_on", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::runtime::Runtime::block_on_inner", file: "[crates]/tokio-[ver]/src/runtime/runtime.rs", line: [NNN] },
                { fn: "tokio::runtime::runtime::Runtime::block_on", file: "[crates]/tokio-[ver]/src/runtime/runtime.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::with_join::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "serial_test::serial_code_lock::local_serial_core", file: "[crates]/serial_test-[ver]/src/serial_code_lock.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::with_join", file: "./src/tests/futures_select.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::futures_select::with_join::{{closure}}", file: "./src/tests/futures_select.rs", line: [NNN] },
            ],
            span_trace: SpanTrace [
                { target: "timeout_tracing::tests::futures_select", name: "do_sleep_b", file: "src/tests/futures_select.rs", line: [NNN] },
                { target: "timeout_tracing::tests::futures_select", name: "do_sleep", file: "src/tests/futures_select.rs", line: [NNN] },
            ],
        },
    ],
}
