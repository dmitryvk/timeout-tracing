---
source: src/tests/reqwest.rs
expression: err
---
TimeoutElapsed {
    active_traces: [
        StackAndSpanTrace {
            stack_trace: Backtrace [
                { fn: "timeout_tracing::trace::StackAndSpanTrace::capture", file: "./src/trace.rs", line: [NNN] },
                { fn: "<timeout_tracing::trace::DefaultTraceCapturer as timeout_tracing::trace::CaptureTrace>::capture", file: "./src/trace.rs", line: [NNN] },
                { fn: "timeout_tracing::waker::TracingTimeoutWaker<C>::clone", file: "./src/waker.rs", line: [NNN] },
                { fn: "timeout_tracing::waker::TracingTimeoutWaker<C>::raw_clone", file: "./src/waker.rs", line: [NNN] },
                { fn: "futures_channel::oneshot::Inner<T>::recv", file: "[crates]/futures-channel-[ver]/src/oneshot.rs", line: [NNN] },
                { fn: "<futures_channel::oneshot::Receiver<T> as core::future::future::Future>::poll", file: "[crates]/futures-channel-[ver]/src/oneshot.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::pool::Checkout<T,K>::poll_waiter", file: "[crates]/hyper-util-[ver]/src/client/legacy/pool.rs", line: [NNN] },
                { fn: "<hyper_util::client::legacy::pool::Checkout<T,K> as core::future::future::Future>::poll", file: "[crates]/hyper-util-[ver]/src/client/legacy/pool.rs", line: [NNN] },
                { fn: "futures_util::future::future::FutureExt::poll_unpin", file: "[crates]/futures-util-[ver]/src/future/future/mod.rs", line: [NNN] },
                { fn: "<futures_util::future::select::Select<A,B> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/select.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::client::Client<C,B>::one_connection_for::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::client::Client<C,B>::connection_for::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::client::Client<C,B>::try_send_request::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::client::Client<C,B>::send_request::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "<hyper_util::client::legacy::client::ResponseFuture as core::future::future::Future>::poll", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "<reqwest::async_impl::client::HyperService as tower_service::Service<http::request::Request<reqwest::async_impl::body::Body>>>::call::{{closure}}", file: "[crates]/reqwest-[ver]/src/async_impl/client.rs", line: [NNN] },
                { fn: "<futures_util::future::either::Either<A,B> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/either.rs", line: [NNN] },
                { fn: "<tower_http::follow_redirect::ResponseFuture<S,ReqBody,P> as core::future::future::Future>::poll", file: "[crates]/tower-http-[ver]/src/follow_redirect/mod.rs", line: [NNN] },
                { fn: "<reqwest::async_impl::client::PendingRequest as core::future::future::Future>::poll", file: "[crates]/reqwest-[ver]/src/async_impl/client.rs", line: [NNN] },
                { fn: "<reqwest::async_impl::client::Pending as core::future::future::Future>::poll", file: "[crates]/reqwest-[ver]/src/async_impl/client.rs", line: [NNN] },
                { fn: "reqwest::get::{{closure}}", file: "[crates]/reqwest-[ver]/src/lib.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::do_reqwest::{{closure}}::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "<tracing::instrument::Instrumented<T> as core::future::future::Future>::poll", file: "[crates]/tracing-[ver]/src/instrument.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::do_reqwest::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "<timeout_tracing::TimeoutFuture<C,Fut> as core::future::future::Future>::poll", file: "./src/lib.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::run_with_tracing::{{closure}}", file: "./src/tests/mod.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::with_reqwest::{{closure}}::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::task::coop::with_budget", file: "[crates]/tokio-[ver]/src/task/coop/mod.rs", line: [NNN] },
                { fn: "tokio::task::coop::budget", file: "[crates]/tokio-[ver]/src/task/coop/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::Context::enter", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::enter::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::context::scoped::Scoped<T>::set", file: "[crates]/tokio-[ver]/src/runtime/context/scoped.rs", line: [NNN] },
                { fn: "tokio::runtime::context::set_scheduler::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/context.rs", line: [NNN] },
                { fn: "tokio::runtime::context::set_scheduler", file: "[crates]/tokio-[ver]/src/runtime/context.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::enter", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CurrentThread::block_on::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::context::runtime::enter_runtime", file: "[crates]/tokio-[ver]/src/runtime/context/runtime.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CurrentThread::block_on", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::runtime::Runtime::block_on_inner", file: "[crates]/tokio-[ver]/src/runtime/runtime.rs", line: [NNN] },
                { fn: "tokio::runtime::runtime::Runtime::block_on", file: "[crates]/tokio-[ver]/src/runtime/runtime.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::with_reqwest::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "serial_test::serial_code_lock::local_serial_core", file: "[crates]/serial_test-[ver]/src/serial_code_lock.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::with_reqwest", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::with_reqwest::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
            ],
            span_trace: SpanTrace [
                { target: "timeout_tracing::tests::reqwest", name: "do_reqwest", file: "src/tests/reqwest.rs", line: [NNN] },
            ],
        },
        StackAndSpanTrace {
            stack_trace: Backtrace [
                { fn: "timeout_tracing::trace::StackAndSpanTrace::capture", file: "./src/trace.rs", line: [NNN] },
                { fn: "<timeout_tracing::trace::DefaultTraceCapturer as timeout_tracing::trace::CaptureTrace>::capture", file: "./src/trace.rs", line: [NNN] },
                { fn: "timeout_tracing::waker::TracingTimeoutWaker<C>::clone", file: "./src/waker.rs", line: [NNN] },
                { fn: "timeout_tracing::waker::TracingTimeoutWaker<C>::raw_clone", file: "./src/waker.rs", line: [NNN] },
                { fn: "futures_core::task::__internal::atomic_waker::AtomicWaker::register", file: "[crates]/futures-core-[ver]/src/task/__internal/atomic_waker.rs", line: [NNN] },
                { fn: "<futures_util::stream::futures_unordered::FuturesUnordered<Fut> as futures_core::stream::Stream>::poll_next", file: "[crates]/futures-util-[ver]/src/stream/futures_unordered/mod.rs", line: [NNN] },
                { fn: "futures_util::stream::stream::StreamExt::poll_next_unpin", file: "[crates]/futures-util-[ver]/src/stream/stream/mod.rs", line: [NNN] },
                { fn: "<futures_util::stream::stream::next::Next<St> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/stream/stream/next.rs", line: [NNN] },
                { fn: "hickory_resolver::name_server::name_server_pool::parallel_conn_loop::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/name_server/name_server_pool.rs", line: [NNN] },
                { fn: "hickory_resolver::name_server::name_server_pool::NameServerPool<P>::try_send::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/name_server/name_server_pool.rs", line: [NNN] },
                { fn: "<hickory_resolver::name_server::name_server_pool::NameServerPool<P> as hickory_proto::xfer::dns_handle::DnsHandle>::send::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/name_server/name_server_pool.rs", line: [NNN] },
                { fn: "<futures_util::stream::once::Once<Fut> as futures_core::stream::Stream>::poll_next", file: "[crates]/futures-util-[ver]/src/stream/once.rs", line: [NNN] },
                { fn: "<core::pin::Pin<P> as futures_core::stream::Stream>::poll_next", file: "[crates]/futures-core-[ver]/src/stream.rs", line: [NNN] },
                { fn: "futures_util::stream::stream::StreamExt::poll_next_unpin", file: "[crates]/futures-util-[ver]/src/stream/stream/mod.rs", line: [NNN] },
                { fn: "<hickory_proto::xfer::retry_dns_handle::RetrySendStream<H> as futures_core::stream::Stream>::poll_next", file: "[crates]/hickory-proto-[ver]/src/xfer/retry_dns_handle.rs", line: [NNN] },
                { fn: "<core::pin::Pin<P> as futures_core::stream::Stream>::poll_next", file: "[crates]/futures-core-[ver]/src/stream.rs", line: [NNN] },
                { fn: "futures_util::stream::stream::StreamExt::poll_next_unpin", file: "[crates]/futures-util-[ver]/src/stream/stream/mod.rs", line: [NNN] },
                { fn: "<hickory_proto::xfer::FirstAnswerFuture<S> as core::future::future::Future>::poll", file: "[crates]/hickory-proto-[ver]/src/xfer/mod.rs", line: [NNN] },
                { fn: "hickory_resolver::caching_client::CachingClient<C,E>::inner_lookup::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/caching_client.rs", line: [NNN] },
                { fn: "hickory_resolver::lookup_ip::hosts_lookup::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/lookup_ip.rs", line: [NNN] },
                { fn: "futures_util::future::future::FutureExt::poll_unpin", file: "[crates]/futures-util-[ver]/src/future/future/mod.rs", line: [NNN] },
                { fn: "<futures_util::future::select::Select<A,B> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/select.rs", line: [NNN] },
                { fn: "hickory_resolver::lookup_ip::ipv4_and_ipv6::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/lookup_ip.rs", line: [NNN] },
                { fn: "hickory_resolver::lookup_ip::strategic_lookup::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/lookup_ip.rs", line: [NNN] },
                { fn: "<hickory_resolver::lookup_ip::LookupIpFuture<C,E> as core::future::future::Future>::poll", file: "[crates]/hickory-resolver-[ver]/src/lookup_ip.rs", line: [NNN] },
                { fn: "hickory_resolver::async_resolver::AsyncResolver<P>::lookup_ip::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/async_resolver.rs", line: [NNN] },
                { fn: "<reqwest::dns::hickory::HickoryDnsResolver as reqwest::dns::resolve::Resolve>::resolve::{{closure}}", file: "[crates]/reqwest-[ver]/src/dns/hickory.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::connect::dns::resolve::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/connect/dns.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::connect::http::HttpConnector<R>::call_async::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/connect/http.rs", line: [NNN] },
                { fn: "<hyper_util::client::legacy::connect::http::HttpConnector<R> as tower_service::Service<http::uri::Uri>>::call::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/connect/http.rs", line: [NNN] },
                { fn: "<hyper_util::client::legacy::connect::http::HttpConnecting<R> as core::future::future::Future>::poll", file: "[crates]/hyper-util-[ver]/src/client/legacy/connect/http.rs", line: [NNN] },
                { fn: "<hyper_tls::client::HttpsConnector<T> as tower_service::Service<http::uri::Uri>>::call::{{closure}}", file: "[crates]/hyper-tls-[ver]/src/client.rs", line: [NNN] },
                { fn: "<hyper_tls::client::HttpsConnecting<T> as core::future::future::Future>::poll", file: "[crates]/hyper-tls-[ver]/src/client.rs", line: [NNN] },
                { fn: "reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}}", file: "[crates]/reqwest-[ver]/src/connect.rs", line: [NNN] },
                { fn: "reqwest::connect::with_timeout::{{closure}}", file: "[crates]/reqwest-[ver]/src/connect.rs", line: [NNN] },
                { fn: "<hyper_util::service::oneshot::Oneshot<S,Req> as core::future::future::Future>::poll", file: "[crates]/hyper-util-[ver]/src/service/oneshot.rs", line: [NNN] },
                { fn: "<F as futures_core::future::TryFuture>::try_poll", file: "[crates]/futures-core-[ver]/src/future.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::into_future::IntoFuture<Fut> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/try_future/into_future.rs", line: [NNN] },
                { fn: "<futures_util::future::future::map::Map<Fut,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/future/map.rs", line: [NNN] },
                { fn: "<futures_util::future::future::Map<Fut,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/lib.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::MapErr<Fut,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/lib.rs", line: [NNN] },
                { fn: "<F as futures_core::future::TryFuture>::try_poll", file: "[crates]/futures-core-[ver]/src/future.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::into_future::IntoFuture<Fut> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/try_future/into_future.rs", line: [NNN] },
                { fn: "<futures_util::future::future::map::Map<Fut,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/future/map.rs", line: [NNN] },
                { fn: "<futures_util::future::future::Map<Fut,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/lib.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::MapOk<Fut,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/lib.rs", line: [NNN] },
                { fn: "<F as futures_core::future::TryFuture>::try_poll", file: "[crates]/futures-core-[ver]/src/future.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::try_flatten::TryFlatten<Fut,<Fut as futures_core::future::TryFuture>::Ok> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/try_future/try_flatten.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::TryFlatten<Fut1,Fut2> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/lib.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::AndThen<Fut1,Fut2,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/lib.rs", line: [NNN] },
                { fn: "<futures_util::future::either::Either<A,B> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/either.rs", line: [NNN] },
                { fn: "<hyper_util::common::lazy::Lazy<F,R> as core::future::future::Future>::poll", file: "[crates]/hyper-util-[ver]/src/common/lazy.rs", line: [NNN] },
                { fn: "futures_util::future::future::FutureExt::poll_unpin", file: "[crates]/futures-util-[ver]/src/future/future/mod.rs", line: [NNN] },
                { fn: "<futures_util::future::select::Select<A,B> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/select.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::client::Client<C,B>::one_connection_for::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::client::Client<C,B>::connection_for::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::client::Client<C,B>::try_send_request::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::client::Client<C,B>::send_request::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "<hyper_util::client::legacy::client::ResponseFuture as core::future::future::Future>::poll", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "<reqwest::async_impl::client::HyperService as tower_service::Service<http::request::Request<reqwest::async_impl::body::Body>>>::call::{{closure}}", file: "[crates]/reqwest-[ver]/src/async_impl/client.rs", line: [NNN] },
                { fn: "<futures_util::future::either::Either<A,B> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/either.rs", line: [NNN] },
                { fn: "<tower_http::follow_redirect::ResponseFuture<S,ReqBody,P> as core::future::future::Future>::poll", file: "[crates]/tower-http-[ver]/src/follow_redirect/mod.rs", line: [NNN] },
                { fn: "<reqwest::async_impl::client::PendingRequest as core::future::future::Future>::poll", file: "[crates]/reqwest-[ver]/src/async_impl/client.rs", line: [NNN] },
                { fn: "<reqwest::async_impl::client::Pending as core::future::future::Future>::poll", file: "[crates]/reqwest-[ver]/src/async_impl/client.rs", line: [NNN] },
                { fn: "reqwest::get::{{closure}}", file: "[crates]/reqwest-[ver]/src/lib.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::do_reqwest::{{closure}}::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "<tracing::instrument::Instrumented<T> as core::future::future::Future>::poll", file: "[crates]/tracing-[ver]/src/instrument.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::do_reqwest::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "<timeout_tracing::TimeoutFuture<C,Fut> as core::future::future::Future>::poll", file: "./src/lib.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::run_with_tracing::{{closure}}", file: "./src/tests/mod.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::with_reqwest::{{closure}}::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::task::coop::with_budget", file: "[crates]/tokio-[ver]/src/task/coop/mod.rs", line: [NNN] },
                { fn: "tokio::task::coop::budget", file: "[crates]/tokio-[ver]/src/task/coop/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::Context::enter", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::enter::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::context::scoped::Scoped<T>::set", file: "[crates]/tokio-[ver]/src/runtime/context/scoped.rs", line: [NNN] },
                { fn: "tokio::runtime::context::set_scheduler::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/context.rs", line: [NNN] },
                { fn: "tokio::runtime::context::set_scheduler", file: "[crates]/tokio-[ver]/src/runtime/context.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::enter", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CurrentThread::block_on::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::context::runtime::enter_runtime", file: "[crates]/tokio-[ver]/src/runtime/context/runtime.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CurrentThread::block_on", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::runtime::Runtime::block_on_inner", file: "[crates]/tokio-[ver]/src/runtime/runtime.rs", line: [NNN] },
                { fn: "tokio::runtime::runtime::Runtime::block_on", file: "[crates]/tokio-[ver]/src/runtime/runtime.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::with_reqwest::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "serial_test::serial_code_lock::local_serial_core", file: "[crates]/serial_test-[ver]/src/serial_code_lock.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::with_reqwest", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::with_reqwest::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
            ],
            span_trace: SpanTrace [
                { target: "timeout_tracing::tests::reqwest", name: "do_reqwest", file: "src/tests/reqwest.rs", line: [NNN] },
            ],
        },
        StackAndSpanTrace {
            stack_trace: Backtrace [
                { fn: "timeout_tracing::trace::StackAndSpanTrace::capture", file: "./src/trace.rs", line: [NNN] },
                { fn: "<timeout_tracing::trace::DefaultTraceCapturer as timeout_tracing::trace::CaptureTrace>::capture", file: "./src/trace.rs", line: [NNN] },
                { fn: "timeout_tracing::waker::TracingTimeoutWaker<C>::clone", file: "./src/waker.rs", line: [NNN] },
                { fn: "timeout_tracing::waker::TracingTimeoutWaker<C>::raw_clone", file: "./src/waker.rs", line: [NNN] },
                { fn: "futures_core::task::__internal::atomic_waker::AtomicWaker::register", file: "[crates]/futures-core-[ver]/src/task/__internal/atomic_waker.rs", line: [NNN] },
                { fn: "<futures_util::stream::futures_unordered::FuturesUnordered<Fut> as futures_core::stream::Stream>::poll_next", file: "[crates]/futures-util-[ver]/src/stream/futures_unordered/mod.rs", line: [NNN] },
                { fn: "futures_util::stream::stream::StreamExt::poll_next_unpin", file: "[crates]/futures-util-[ver]/src/stream/stream/mod.rs", line: [NNN] },
                { fn: "<futures_util::stream::stream::next::Next<St> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/stream/stream/next.rs", line: [NNN] },
                { fn: "hickory_resolver::name_server::name_server_pool::parallel_conn_loop::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/name_server/name_server_pool.rs", line: [NNN] },
                { fn: "hickory_resolver::name_server::name_server_pool::NameServerPool<P>::try_send::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/name_server/name_server_pool.rs", line: [NNN] },
                { fn: "<hickory_resolver::name_server::name_server_pool::NameServerPool<P> as hickory_proto::xfer::dns_handle::DnsHandle>::send::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/name_server/name_server_pool.rs", line: [NNN] },
                { fn: "<futures_util::stream::once::Once<Fut> as futures_core::stream::Stream>::poll_next", file: "[crates]/futures-util-[ver]/src/stream/once.rs", line: [NNN] },
                { fn: "<core::pin::Pin<P> as futures_core::stream::Stream>::poll_next", file: "[crates]/futures-core-[ver]/src/stream.rs", line: [NNN] },
                { fn: "futures_util::stream::stream::StreamExt::poll_next_unpin", file: "[crates]/futures-util-[ver]/src/stream/stream/mod.rs", line: [NNN] },
                { fn: "<hickory_proto::xfer::retry_dns_handle::RetrySendStream<H> as futures_core::stream::Stream>::poll_next", file: "[crates]/hickory-proto-[ver]/src/xfer/retry_dns_handle.rs", line: [NNN] },
                { fn: "<core::pin::Pin<P> as futures_core::stream::Stream>::poll_next", file: "[crates]/futures-core-[ver]/src/stream.rs", line: [NNN] },
                { fn: "futures_util::stream::stream::StreamExt::poll_next_unpin", file: "[crates]/futures-util-[ver]/src/stream/stream/mod.rs", line: [NNN] },
                { fn: "<hickory_proto::xfer::FirstAnswerFuture<S> as core::future::future::Future>::poll", file: "[crates]/hickory-proto-[ver]/src/xfer/mod.rs", line: [NNN] },
                { fn: "hickory_resolver::caching_client::CachingClient<C,E>::inner_lookup::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/caching_client.rs", line: [NNN] },
                { fn: "hickory_resolver::lookup_ip::hosts_lookup::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/lookup_ip.rs", line: [NNN] },
                { fn: "futures_util::future::future::FutureExt::poll_unpin", file: "[crates]/futures-util-[ver]/src/future/future/mod.rs", line: [NNN] },
                { fn: "<futures_util::future::select::Select<A,B> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/select.rs", line: [NNN] },
                { fn: "hickory_resolver::lookup_ip::ipv4_and_ipv6::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/lookup_ip.rs", line: [NNN] },
                { fn: "hickory_resolver::lookup_ip::strategic_lookup::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/lookup_ip.rs", line: [NNN] },
                { fn: "<hickory_resolver::lookup_ip::LookupIpFuture<C,E> as core::future::future::Future>::poll", file: "[crates]/hickory-resolver-[ver]/src/lookup_ip.rs", line: [NNN] },
                { fn: "hickory_resolver::async_resolver::AsyncResolver<P>::lookup_ip::{{closure}}", file: "[crates]/hickory-resolver-[ver]/src/async_resolver.rs", line: [NNN] },
                { fn: "<reqwest::dns::hickory::HickoryDnsResolver as reqwest::dns::resolve::Resolve>::resolve::{{closure}}", file: "[crates]/reqwest-[ver]/src/dns/hickory.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::connect::dns::resolve::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/connect/dns.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::connect::http::HttpConnector<R>::call_async::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/connect/http.rs", line: [NNN] },
                { fn: "<hyper_util::client::legacy::connect::http::HttpConnector<R> as tower_service::Service<http::uri::Uri>>::call::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/connect/http.rs", line: [NNN] },
                { fn: "<hyper_util::client::legacy::connect::http::HttpConnecting<R> as core::future::future::Future>::poll", file: "[crates]/hyper-util-[ver]/src/client/legacy/connect/http.rs", line: [NNN] },
                { fn: "<hyper_tls::client::HttpsConnector<T> as tower_service::Service<http::uri::Uri>>::call::{{closure}}", file: "[crates]/hyper-tls-[ver]/src/client.rs", line: [NNN] },
                { fn: "<hyper_tls::client::HttpsConnecting<T> as core::future::future::Future>::poll", file: "[crates]/hyper-tls-[ver]/src/client.rs", line: [NNN] },
                { fn: "reqwest::connect::ConnectorService::connect_with_maybe_proxy::{{closure}}", file: "[crates]/reqwest-[ver]/src/connect.rs", line: [NNN] },
                { fn: "reqwest::connect::with_timeout::{{closure}}", file: "[crates]/reqwest-[ver]/src/connect.rs", line: [NNN] },
                { fn: "<hyper_util::service::oneshot::Oneshot<S,Req> as core::future::future::Future>::poll", file: "[crates]/hyper-util-[ver]/src/service/oneshot.rs", line: [NNN] },
                { fn: "<F as futures_core::future::TryFuture>::try_poll", file: "[crates]/futures-core-[ver]/src/future.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::into_future::IntoFuture<Fut> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/try_future/into_future.rs", line: [NNN] },
                { fn: "<futures_util::future::future::map::Map<Fut,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/future/map.rs", line: [NNN] },
                { fn: "<futures_util::future::future::Map<Fut,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/lib.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::MapErr<Fut,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/lib.rs", line: [NNN] },
                { fn: "<F as futures_core::future::TryFuture>::try_poll", file: "[crates]/futures-core-[ver]/src/future.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::into_future::IntoFuture<Fut> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/try_future/into_future.rs", line: [NNN] },
                { fn: "<futures_util::future::future::map::Map<Fut,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/future/map.rs", line: [NNN] },
                { fn: "<futures_util::future::future::Map<Fut,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/lib.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::MapOk<Fut,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/lib.rs", line: [NNN] },
                { fn: "<F as futures_core::future::TryFuture>::try_poll", file: "[crates]/futures-core-[ver]/src/future.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::try_flatten::TryFlatten<Fut,<Fut as futures_core::future::TryFuture>::Ok> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/try_future/try_flatten.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::TryFlatten<Fut1,Fut2> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/lib.rs", line: [NNN] },
                { fn: "<futures_util::future::try_future::AndThen<Fut1,Fut2,F> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/lib.rs", line: [NNN] },
                { fn: "<futures_util::future::either::Either<A,B> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/either.rs", line: [NNN] },
                { fn: "<hyper_util::common::lazy::Lazy<F,R> as core::future::future::Future>::poll", file: "[crates]/hyper-util-[ver]/src/common/lazy.rs", line: [NNN] },
                { fn: "futures_util::future::future::FutureExt::poll_unpin", file: "[crates]/futures-util-[ver]/src/future/future/mod.rs", line: [NNN] },
                { fn: "<futures_util::future::select::Select<A,B> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/select.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::client::Client<C,B>::one_connection_for::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::client::Client<C,B>::connection_for::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::client::Client<C,B>::try_send_request::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "hyper_util::client::legacy::client::Client<C,B>::send_request::{{closure}}", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "<hyper_util::client::legacy::client::ResponseFuture as core::future::future::Future>::poll", file: "[crates]/hyper-util-[ver]/src/client/legacy/client.rs", line: [NNN] },
                { fn: "<reqwest::async_impl::client::HyperService as tower_service::Service<http::request::Request<reqwest::async_impl::body::Body>>>::call::{{closure}}", file: "[crates]/reqwest-[ver]/src/async_impl/client.rs", line: [NNN] },
                { fn: "<futures_util::future::either::Either<A,B> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/future/either.rs", line: [NNN] },
                { fn: "<tower_http::follow_redirect::ResponseFuture<S,ReqBody,P> as core::future::future::Future>::poll", file: "[crates]/tower-http-[ver]/src/follow_redirect/mod.rs", line: [NNN] },
                { fn: "<reqwest::async_impl::client::PendingRequest as core::future::future::Future>::poll", file: "[crates]/reqwest-[ver]/src/async_impl/client.rs", line: [NNN] },
                { fn: "<reqwest::async_impl::client::Pending as core::future::future::Future>::poll", file: "[crates]/reqwest-[ver]/src/async_impl/client.rs", line: [NNN] },
                { fn: "reqwest::get::{{closure}}", file: "[crates]/reqwest-[ver]/src/lib.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::do_reqwest::{{closure}}::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "<tracing::instrument::Instrumented<T> as core::future::future::Future>::poll", file: "[crates]/tracing-[ver]/src/instrument.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::do_reqwest::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "<timeout_tracing::TimeoutFuture<C,Fut> as core::future::future::Future>::poll", file: "./src/lib.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::run_with_tracing::{{closure}}", file: "./src/tests/mod.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::with_reqwest::{{closure}}::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::task::coop::with_budget", file: "[crates]/tokio-[ver]/src/task/coop/mod.rs", line: [NNN] },
                { fn: "tokio::task::coop::budget", file: "[crates]/tokio-[ver]/src/task/coop/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::Context::enter", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::enter::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::context::scoped::Scoped<T>::set", file: "[crates]/tokio-[ver]/src/runtime/context/scoped.rs", line: [NNN] },
                { fn: "tokio::runtime::context::set_scheduler::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/context.rs", line: [NNN] },
                { fn: "tokio::runtime::context::set_scheduler", file: "[crates]/tokio-[ver]/src/runtime/context.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::enter", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CurrentThread::block_on::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::context::runtime::enter_runtime", file: "[crates]/tokio-[ver]/src/runtime/context/runtime.rs", line: [NNN] },
                { fn: "tokio::runtime::scheduler::current_thread::CurrentThread::block_on", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                { fn: "tokio::runtime::runtime::Runtime::block_on_inner", file: "[crates]/tokio-[ver]/src/runtime/runtime.rs", line: [NNN] },
                { fn: "tokio::runtime::runtime::Runtime::block_on", file: "[crates]/tokio-[ver]/src/runtime/runtime.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::with_reqwest::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "serial_test::serial_code_lock::local_serial_core", file: "[crates]/serial_test-[ver]/src/serial_code_lock.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::with_reqwest", file: "./src/tests/reqwest.rs", line: [NNN] },
                { fn: "timeout_tracing::tests::reqwest::with_reqwest::{{closure}}", file: "./src/tests/reqwest.rs", line: [NNN] },
            ],
            span_trace: SpanTrace [
                { target: "timeout_tracing::tests::reqwest", name: "do_reqwest", file: "src/tests/reqwest.rs", line: [NNN] },
            ],
        },
    ],
}
