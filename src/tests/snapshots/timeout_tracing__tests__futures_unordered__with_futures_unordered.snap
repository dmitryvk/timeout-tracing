---
source: src/tests/futures_unordered.rs
expression: result
---
Err(
    TimeoutElapsed {
        active_traces: [
            StackAndSpanTrace {
                stack_trace: Backtrace [
                    { fn: "timeout_tracing::trace::StackAndSpanTrace::capture", file: "./src/trace.rs", line: [NNN] },
                    { fn: "<timeout_tracing::trace::DefaultTraceCapturer as timeout_tracing::trace::CaptureTrace>::capture", file: "./src/trace.rs", line: [NNN] },
                    { fn: "timeout_tracing::waker::TracingTimeoutWaker<C>::clone", file: "./src/waker.rs", line: [NNN] },
                    { fn: "timeout_tracing::waker::TracingTimeoutWaker<C>::raw_clone", file: "./src/waker.rs", line: [NNN] },
                    { fn: "futures_core::task::__internal::atomic_waker::AtomicWaker::register", file: "[crates]/futures-core-[ver]/src/task/__internal/atomic_waker.rs", line: [NNN] },
                    { fn: "<futures_util::stream::futures_unordered::FuturesUnordered<Fut> as futures_core::stream::Stream>::poll_next", file: "[crates]/futures-util-[ver]/src/stream/futures_unordered/mod.rs", line: [NNN] },
                    { fn: "futures_util::stream::stream::StreamExt::poll_next_unpin", file: "[crates]/futures-util-[ver]/src/stream/stream/mod.rs", line: [NNN] },
                    { fn: "<futures_util::stream::stream::next::Next<St> as core::future::future::Future>::poll", file: "[crates]/futures-util-[ver]/src/stream/stream/next.rs", line: [NNN] },
                    { fn: "timeout_tracing::tests::futures_unordered::do_unordered::{{closure}}::{{closure}}", file: "./src/tests/futures_unordered.rs", line: [NNN] },
                    { fn: "<tracing::instrument::Instrumented<T> as core::future::future::Future>::poll", file: "[crates]/tracing-[ver]/src/instrument.rs", line: [NNN] },
                    { fn: "timeout_tracing::tests::futures_unordered::do_unordered::{{closure}}", file: "./src/tests/futures_unordered.rs", line: [NNN] },
                    { fn: "<timeout_tracing::TimeoutFuture<C,Fut> as core::future::future::Future>::poll", file: "./src/lib.rs", line: [NNN] },
                    { fn: "timeout_tracing::tests::run_with_tracing::{{closure}}", file: "./src/tests/mod.rs", line: [NNN] },
                    { fn: "timeout_tracing::tests::futures_unordered::with_futures_unordered::{{closure}}::{{closure}}", file: "./src/tests/futures_unordered.rs", line: [NNN] },
                    { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                    { fn: "tokio::task::coop::with_budget", file: "[crates]/tokio-[ver]/src/task/coop/mod.rs", line: [NNN] },
                    { fn: "tokio::task::coop::budget", file: "[crates]/tokio-[ver]/src/task/coop/mod.rs", line: [NNN] },
                    { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                    { fn: "tokio::runtime::scheduler::current_thread::Context::enter", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                    { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                    { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::enter::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                    { fn: "tokio::runtime::context::scoped::Scoped<T>::set", file: "[crates]/tokio-[ver]/src/runtime/context/scoped.rs", line: [NNN] },
                    { fn: "tokio::runtime::context::set_scheduler::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/context.rs", line: [NNN] },
                    { fn: "tokio::runtime::context::set_scheduler", file: "[crates]/tokio-[ver]/src/runtime/context.rs", line: [NNN] },
                    { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::enter", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                    { fn: "tokio::runtime::scheduler::current_thread::CoreGuard::block_on", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                    { fn: "tokio::runtime::scheduler::current_thread::CurrentThread::block_on::{{closure}}", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                    { fn: "tokio::runtime::context::runtime::enter_runtime", file: "[crates]/tokio-[ver]/src/runtime/context/runtime.rs", line: [NNN] },
                    { fn: "tokio::runtime::scheduler::current_thread::CurrentThread::block_on", file: "[crates]/tokio-[ver]/src/runtime/scheduler/current_thread/mod.rs", line: [NNN] },
                    { fn: "tokio::runtime::runtime::Runtime::block_on_inner", file: "[crates]/tokio-[ver]/src/runtime/runtime.rs", line: [NNN] },
                    { fn: "tokio::runtime::runtime::Runtime::block_on", file: "[crates]/tokio-[ver]/src/runtime/runtime.rs", line: [NNN] },
                    { fn: "timeout_tracing::tests::futures_unordered::with_futures_unordered::{{closure}}", file: "./src/tests/futures_unordered.rs", line: [NNN] },
                    { fn: "serial_test::serial_code_lock::local_serial_core", file: "[crates]/serial_test-[ver]/src/serial_code_lock.rs", line: [NNN] },
                    { fn: "timeout_tracing::tests::futures_unordered::with_futures_unordered", file: "./src/tests/futures_unordered.rs", line: [NNN] },
                    { fn: "timeout_tracing::tests::futures_unordered::with_futures_unordered::{{closure}}", file: "./src/tests/futures_unordered.rs", line: [NNN] },
                ],
                span_trace: SpanTrace [
                    { target: "timeout_tracing::tests::futures_unordered", name: "do_unordered", file: "src/tests/futures_unordered.rs", line: [NNN] },
                ],
            },
        ],
    },
)
